"use client";

import { useEffect, useState } from "react";
import { supabase } from "@/lib/supabase";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { AlertCircle, CheckCircle2, XCircle, Image as ImageIcon } from "lucide-react";
import { toast } from "@/hooks/use-toast";
import Image from "next/image";

interface KycSubmission {
  id: string;
  kyc_full_name: string;
  kyc_address: string;
  kyc_dob: string;
  kyc_id_type: string;
  kyc_id_number: string;
  kyc_id_expiry: string;
  kyc_id_image_url: string;
  kyc_status: "pending" | "approved" | "rejected";
  kyc_submitted_at: string;
  kyc_reviewed_at: string | null;
  kyc_notes: string | null;
  email: string;
}

function formatDate(dateString: string) {
  if (!dateString) return "N/A";
  return new Date(dateString).toLocaleString();
}

async function getImageUrl(imageUrl: string): Promise<string> {
  return `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/kyc-documents/${imageUrl}`;
}

function ImagePreview({ imageUrl }: { imageUrl: string }) {
  const [url, setUrl] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function loadImage() {
      try {
        setLoading(true);
        const resolvedUrl = await getImageUrl(imageUrl);
        if (!resolvedUrl) {
          throw new Error('Could not load image');
        }
        setUrl(resolvedUrl);
        setError(null);
      } catch (err) {
        console.error('Error loading image:', err);
        setError(err instanceof Error ? err.message : 'Failed to load image');
        setUrl(null);
      } finally {
        setLoading(false);
      }
    }

    if (imageUrl) {
      loadImage();
    }
  }, [imageUrl]);

  if (loading) {
    return (
      <div className="w-full h-48 bg-gray-100 rounded-lg flex items-center justify-center">
        <div className="animate-pulse text-gray-400">Loading...</div>
      </div>
    );
  }

  if (error || !url) {
    return (
      <div className="w-full h-48 bg-gray-100 rounded-lg flex items-center justify-center">
        <div className="text-gray-400 flex flex-col items-center gap-2">
          <ImageIcon className="w-8 h-8" />
          <span className="text-sm">{error || 'Image not available'}</span>
        </div>
      </div>
    );
  }

  return (
    <div className="relative w-full h-48">
      <Image
        src={url}
        alt="ID Document"
        fill
        className="object-contain rounded-lg"
      />
    </div>
  );
}

export default function KycReviewPage() {
  const [submissions, setSubmissions] = useState<KycSubmission[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedSubmission, setSelectedSubmission] = useState<KycSubmission | null>(null);
  const [showDialog, setShowDialog] = useState(false);
  const [rejectReason, setRejectReason] = useState("");
  const [processing, setProcessing] = useState(false);
  const [activeTab, setActiveTab] = useState<"pending" | "approved" | "rejected">("pending");

  const filteredSubmissions = submissions.filter(
    (submission) => submission.kyc_status === activeTab
  );

  useEffect(() => {
    fetchSubmissions();
  }, []);

  async function fetchSubmissions() {
    try {
      setLoading(true);

      const {
        data: { session },
        error: authError,
      } = await supabase.auth.getSession();

      if (authError) throw authError;
      if (!session) throw new Error("No active session - please log in");

      const { data, error } = await supabase
        .from("profiles")
        .select(`
          id,
          kyc_full_name,
          kyc_address,
          kyc_dob,
          kyc_id_type,
          kyc_id_number,
          kyc_id_expiry,
          kyc_id_image_url,
          kyc_status,
          kyc_submitted_at,
          kyc_reviewed_at,
          kyc_notes
        `)
        .filter("kyc_status", "neq", null)
        .order("kyc_submitted_at", { ascending: false });

      if (error) throw error;
      if (!data) throw new Error("No data returned from database");

      // Get emails through auth_users_view
      const { data: emailsData, error: emailsError } = await supabase
        .from("auth_users_view")
        .select("id, email")
        .in(
          "id",
          data.map((d) => d.id)
        );

      let emails: Record<string, string> = {};
      if (emailsError) {
        console.error("Error fetching user emails:", emailsError);
      } else if (emailsData) {
        emails = emailsData.reduce((acc, item) => {
          acc[item.id] = item.email || "No email found";
          return acc;
        }, {} as Record<string, string>);
      }

      const transformedData: KycSubmission[] = data.map((item) => ({
        id: item.id,
        kyc_full_name: item.kyc_full_name || "",
        kyc_address: item.kyc_address || "",
        kyc_dob: item.kyc_dob || "",
        kyc_id_type: item.kyc_id_type || "",
        kyc_id_number: item.kyc_id_number || "",
        kyc_id_expiry: item.kyc_id_expiry || "",
        kyc_id_image_url: item.kyc_id_image_url || "",
        kyc_status: (item.kyc_status as KycSubmission["kyc_status"]) || "pending",
        kyc_submitted_at: item.kyc_submitted_at || "",
        kyc_reviewed_at: item.kyc_reviewed_at || null,
        kyc_notes: item.kyc_notes || null,
        email: emails[item.id] || "No email found"
      }));

      setSubmissions(transformedData);
    } catch (error) {
      console.error("Error fetching submissions:", error);
      toast({
        title: "Error",
        description:
          error instanceof Error
            ? error.message
            : "Failed to load KYC submissions",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  }

  async function handleApprove(submission: KycSubmission) {
    setProcessing(true);
    try {
      const { error } = await supabase
        .from("profiles")
        .update({
          kyc_status: "approved",
          kyc_reviewed_at: new Date().toISOString(),
          kyc_notes: "Approved",
        })
        .eq("id", submission.id);

      if (error) throw error;

      toast({
        title: "Success",
        description: "KYC submission has been approved",
      });

      await fetchSubmissions();
      setShowDialog(false);
    } catch (error) {
      console.error("Error approving submission:", error);
      toast({
        title: "Error",
        description: "Failed to approve KYC submission",
        variant: "destructive",
      });
    } finally {
      setProcessing(false);
    }
  }

  async function handleReject(submission: KycSubmission) {
    if (!rejectReason.trim()) {
      toast({
        title: "Error",
        description: "Please provide a reason for rejection",
        variant: "destructive",
      });
      return;
    }

    setProcessing(true);
    try {
      const { error } = await supabase
        .from("profiles")
        .update({
          kyc_status: "rejected",
          kyc_reviewed_at: new Date().toISOString(),
          kyc_notes: rejectReason,
        })
        .eq("id", submission.id);

      if (error) throw error;

      toast({
        title: "Success",
        description: "KYC submission has been rejected",
      });

      await fetchSubmissions();
      setShowDialog(false);
      setRejectReason("");
    } catch (error) {
      console.error("Error rejecting submission:", error);
      toast({
        title: "Error",
        description: "Failed to reject KYC submission",
        variant: "destructive",
      });
    } finally {
      setProcessing(false);
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 py-8 px-4">
      <div className="max-w-7xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-blue-900 mb-2">
            KYC Review Dashboard
          </h1>
          <p className="text-gray-600">Review and manage KYC submissions</p>
        </div>

        <Tabs
          value={activeTab}
          onValueChange={(value: "pending" | "approved" | "rejected") =>
            setActiveTab(value)
          }
        >
          <TabsList className="mb-6">
            <TabsTrigger value="pending">
              Pending
              {submissions.filter((s) => s.kyc_status === "pending").length > 0 && (
                <Badge variant="destructive" className="ml-2">
                  {submissions.filter((s) => s.kyc_status === "pending").length}
                </Badge>
              )}
            </TabsTrigger>
            <TabsTrigger value="approved">Approved</TabsTrigger>
            <TabsTrigger value="rejected">Rejected</TabsTrigger>
          </TabsList>

          <TabsContent value={activeTab} className="space-y-6">
            {loading ? (
              <div className="text-center py-12">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-900 mx-auto"></div>
                <p className="mt-4 text-gray-600">Loading submissions...</p>
              </div>
            ) : filteredSubmissions.length === 0 ? (
              <Card className="p-12 text-center">
                <p className="text-gray-500">
                  No {activeTab} submissions found
                </p>
              </Card>
            ) : (
              filteredSubmissions.map((submission) => (
                <Card key={submission.id} className="p-6">
                  <div className="flex flex-col lg:flex-row lg:items-start gap-6">
                    <div className="flex-grow space-y-4">
                      <div className="flex items-start justify-between">
                        <div>
                          <h2 className="text-xl font-semibold text-blue-900">
                            {submission.kyc_full_name}
                          </h2>
                          <p className="text-gray-500">{submission.email}</p>
                        </div>
                        <Badge
                          className={
                            submission.kyc_status === "approved"
                              ? "bg-green-100 text-green-800"
                              : submission.kyc_status === "rejected"
                              ? "bg-red-100 text-red-800"
                              : "bg-yellow-100 text-yellow-800"
                          }
                        >
                          {submission.kyc_status.toUpperCase()}
                        </Badge>
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div>
                          <p className="text-sm text-gray-500">Date of Birth</p>
                          <p className="font-medium">
                            {new Date(submission.kyc_dob).toLocaleDateString()}
                          </p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-500">Submitted At</p>
                          <p className="font-medium">
                            {formatDate(submission.kyc_submitted_at)}
                          </p>
                        </div>
                        {submission.kyc_reviewed_at && (
                          <div>
                            <p className="text-sm text-gray-500">Reviewed At</p>
                            <p className="font-medium">
                              {formatDate(submission.kyc_reviewed_at)}
                            </p>
                          </div>
                        )}
                      </div>

                      <div>
                        <p className="text-sm text-gray-500">Address</p>
                        <p className="font-medium whitespace-pre-wrap">
                          {submission.kyc_address}
                        </p>
                      </div>

                      <div className="space-y-6">
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <div>
                            <p className="text-sm text-gray-500">ID Type</p>
                            <p className="font-medium capitalize">
                              {submission.kyc_id_type}
                            </p>
                          </div>
                          <div>
                            <p className="text-sm text-gray-500">ID Number</p>
                            <p className="font-medium">
                              {submission.kyc_id_number}
                            </p>
                          </div>
                          <div>
                            <p className="text-sm text-gray-500">ID Expiry</p>
                            <p className="font-medium">
                              {new Date(submission.kyc_id_expiry).toLocaleDateString()}
                            </p>
                          </div>
                        </div>

                        {submission.kyc_id_image_url && (
                          <div>
                            <p className="text-sm text-gray-500 mb-2">ID Document</p>
                            <ImagePreview imageUrl={submission.kyc_id_image_url} />
                          </div>
                        )}
                      </div>

                      {submission.kyc_notes && (
                        <div>
                          <p className="text-sm text-gray-500">Notes</p>
                          <p className="font-medium">{submission.kyc_notes}</p>
                        </div>
                      )}
                    </div>

                    <div className="flex flex-col gap-3">
                      {submission.kyc_id_image_url && (
                        <Button
                          variant="outline"
                          onClick={() =>
                            window.open(
                              `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/kyc-documents/${submission.kyc_id_image_url}`,
                              "_blank"
                            )
                          }
                          className="w-full"
                        >
                          View ID Document
                        </Button>
                      )}

                      {submission.kyc_status === "pending" && (
                        <>
                          <Button
                            onClick={() => {
                              setSelectedSubmission(submission);
                              setShowDialog(true);
                            }}
                            className="w-full bg-green-600 hover:bg-green-700"
                          >
                            <CheckCircle2 className="w-4 h-4 mr-2" />
                            Approve
                          </Button>
                          <Button
                            variant="destructive"
                            onClick={() => {
                              setSelectedSubmission(submission);
                              setShowDialog(true);
                            }}
                            className="w-full"
                          >
                            <XCircle className="w-4 h-4 mr-2" />
                            Reject
                          </Button>
                        </>
                      )}
                    </div>
                  </div>
                </Card>
              ))
            )}
          </TabsContent>
        </Tabs>
      </div>

      <Dialog open={showDialog} onOpenChange={setShowDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              {selectedSubmission?.kyc_full_name} - Confirm Action
            </DialogTitle>
            <DialogDescription>
              Are you sure you want to {processing ? "process" : "proceed with"}{" "}
              this action?
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            {selectedSubmission && (
              <>
                <div className="space-y-4">
                  <textarea
                    className="w-full p-2 border rounded-md"
                    placeholder="Enter reason for rejection (required for rejecting)"
                    value={rejectReason}
                    onChange={(e) => setRejectReason(e.target.value)}
                    rows={3}
                  />

                  <div className="flex justify-end gap-3">
                    <Button
                      variant="outline"
                      onClick={() => setShowDialog(false)}
                      disabled={processing}
                    >
                      Cancel
                    </Button>
                    <Button
                      onClick={() => handleApprove(selectedSubmission)}
                      className="bg-green-600 hover:bg-green-700"
                      disabled={processing}
                    >
                      <CheckCircle2 className="w-4 h-4 mr-2" />
                      Approve
                    </Button>
                    <Button
                      variant="destructive"
                      onClick={() => handleReject(selectedSubmission)}
                      disabled={processing}
                    >
                      <XCircle className="w-4 h-4 mr-2" />
                      Reject
                    </Button>
                  </div>
                </div>
              </>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
